# Body Labs JavaScript style. Derived from Crockford style, with a bunch of
# tweaks.

env:
    node: true
    mocha: true

plugins:
    - 'mocha'

parserOptions:
    # Allow ES6.
    ecmaVersion: 6

globals:
    Promise: true

extends:
    "eslint:recommended"

rules:
    # Four-space indent.
    indent: ["error", 4, { "SwitchCase": 1 }]
    no-mixed-spaces-and-tabs: "error"
    no-trailing-spaces: "error"

    # Newlint at end of file.
    eol-last: "error"

    # Line comments start with a space <-- like this one does.
    spaced-comment: "error"

    # var compositeThing = new CompositeThing();
    # var params = { thisIsPreferred: true };
    # var params = { this_is_okay: true };
    camelcase: ["error", { "properties": "never" }]
    new-cap: "error"

    # if (cond) {
    #     stuff();
    # } else {
    #     otherStuff();
    # }
    # for (var i = 0; i < target; ++i) {
    #     stuff();
    # };
    # var foo = function (arg1, arg2) {
    #     stuff(arg1);
    # };
    # function factorial (value) {
    #     return value == 0 ? 1 : value * factorial(value - 1);
    # };
    keyword-spacing: ["error", { "before": true, "after": true }]
    brace-style: ["error", "1tbs", { "allowSingleLine": true }]
    space-before-blocks: ["error", "always"]
    curly: "error"
    semi-spacing: "error"
    # This is mentioned in the style guide, but was not enforced by the old
    # linter.
    # func-style: ["error", "expression"]
    space-before-function-paren: ["error", { "anonymous": "always", "named": "ignore" }]
    comma-spacing: "error"
    func-names: ["error", "never"]

    # var foo = [
    #     'one',
    #     'two',
    #     'three',
    # ];
    # var foo = ['one', 'two', 'three'];
    # var bar = {
    #     one: 1,
    #     two: 2,
    #     three: 3,
    # };
    # var bar = { one: 1, two: 2, three: 3 };
    # var baz = { bazinga: {
    #    one: 1,
    #    two: 2,
    # } };
    # foo.bar = 123;
    comma-style: ["error"]
    comma-dangle: ["error", "always-multiline"]
    operator-linebreak: ["error", "after", { "overrides": { ":": "ignore" } } ]
    array-bracket-spacing: ["error", "never"]
    object-curly-spacing: ["error", "always"]
    key-spacing: "error"
    quote-props: ["error", "as-needed"]
    dot-notation: "error"

    # var filter = function (item) { return item.count > 1; }
    # if (foo) {
    #     something();
    # } else {
    #     somethingElse();
    # }
    block-spacing: ["error", "always"]

    # 5 * (1 + 2)
    # ! obj.isValid()
    # ++count
    # count++
    # offset(-width, -height)
    # +bar
    # cond ? first : second
    space-in-parens: "error"
    space-unary-ops: ["error", { "words": true, "nonwords": false, "overrides": { "!": true } }]
    space-infix-ops: "error"

    # Automatic semicolon insertion is pretty bad.
    semi: "error"

    # Crockford, seems sensible.
    no-empty: "error"

    # Crockford, seems sensible.
    wrap-iife: ["error", "any"]

    # Crockford, seems sensible.
    no-with: "error"

    # var x = 'this is a' +
    #     'multi-line string';
    # From Crockford.
    no-multi-str: "error"

    # Avoid type coercion.
    eqeqeq: "error"

    # Style.
    dot-location: ["error", "property"]

    # No more thing.should.be.ok without calling it
    no-unused-expressions: "error"

    # Node.js
    handle-callback-err: "error"
    no-new-require: "error"

    # ES6.
    prefer-const: "warn"
    require-yield: "error"

    # ES6 arrow functions.
    arrow-spacing: "error"

    # ES6 object literals.
    no-useless-constructor: "error"
    no-useless-rename: "error"

    # Disable a couple of the recommended checks:

    # Allow unused parameters. In callbacks, removing them seems to obscure
    # what the functions are doing.
    no-unused-vars: ["error", {"args": "none"}]

    # Well, we should start using loggers more consistently so we can turn
    # this on.
    no-console: "off"

    # Consistency.
    quotes: ["error", "single", { "avoidEscape": true, "allowTemplateLiterals": true }]

    # Mocha.
    "mocha/handle-done-callback": "error"
    "mocha/no-global-tests": "error"
    "mocha/no-mocha-global-arrows": "error"
